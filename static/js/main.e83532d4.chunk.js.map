{"version":3,"sources":["UsState.tsx","Utils.ts","UsMap.tsx","App.tsx","index.tsx"],"names":["allStates","allStatesJson","STATE_NAME_OFFSETS","VT","xArrow","yArrow","xText","optionsArrow","NH","MA","stroke","RI","CT","NJ","DE","MD","UsState","geo","showName","hintUsed","currQuizState","handleStateClick","stateName","properties","name","WashingtonDC","currState","centroid","geoCentroid","className","geography","fill","style","default","outline","hover","pressed","onClick","id","subject","dx","dy","connectorProps","x","fontSize","alignmentBaseline","coordinates","y","textAnchor","offset","getNewShuffledQuiz","_","map","shuffle","Object","keys","getTimeCount","start","end","diffSeconds","Math","floor","getTime","diffMinutes","seconds","minutes","UsMap","useState","Utils","quiz","setQuiz","quizIndex","setQuizIndex","totalErrors","setTotalErrors","errorsToHint","setErrorsToHint","quizEnded","setQuizEnded","Date","startTime","setStartTime","currTime","setCurrTime","useEffect","interval","setInterval","clearInterval","moveToNextState","slice","length","stateGeo","statesPropertiesMap","forEach","state","fontWeight","margin","src","alt","projection","geographies","rsmKey","App","href","rel","target","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e83532d4.chunk.js","sourcesContent":["import React from 'react';\r\nimport {\r\n    Geography,\r\n    Marker,\r\n    Annotation\r\n} from 'react-simple-maps';\r\nimport { geoCentroid } from \"d3-geo\";\r\n// import WashingtonDC from './WashingtonDC';\r\nimport './UsState.css'\r\n\r\n// import states' abbreviations and indices:\r\nimport allStatesJson from \"./data/allStates.json\";\r\nconst allStates: { [key: string]: { id: string, val: string } } = allStatesJson;\r\n\r\nconst STATE_NAME_SIZE = 10;\r\nconst STATE_NAME_OFFSETS: { [key: string]: any; } = {\r\n    VT: { xArrow: -50, yArrow: -20, xText: -45, optionsArrow: {} },\r\n    NH: { xArrow: -25, yArrow: -50, xText: -85, optionsArrow: {} },\r\n    MA: { xArrow: -20, yArrow: 0, xText: 4, optionsArrow: { stroke: \"none\" } },\r\n    RI: { xArrow: -11, yArrow: 30, xText: 4, optionsArrow: {} },\r\n    CT: { xArrow: 0, yArrow: 40, xText: 4, optionsArrow: {} },\r\n    NJ: { xArrow: 10, yArrow: 25, xText: 4, optionsArrow: {} },\r\n    DE: { xArrow: 20, yArrow: 20, xText: 4, optionsArrow: {} },\r\n    MD: { xArrow: 30, yArrow: 30, xText: 4, optionsArrow: {} }\r\n};\r\n\r\nfunction UsState({ geo, showName, hintUsed, currQuizState, handleStateClick }:\r\n    { geo: any, showName: boolean, hintUsed: boolean, currQuizState: string, handleStateClick: any }) {\r\n    const stateName = (geo?.properties?.name || '') as string;\r\n    if (stateName === \"District of Columbia\") {\r\n        return (\r\n            <WashingtonDC geo={geo} />);\r\n    }\r\n\r\n    const currState = allStates[stateName];\r\n    if (!currState) { return (<></>); }\r\n\r\n    const centroid = geoCentroid(geo);\r\n    return (\r\n        <>\r\n            <Geography\r\n                className=\"Geography\"\r\n                stroke=\"#FFF\"\r\n                geography={geo}\r\n                fill={!hintUsed ? \"#DDD\" : '#FFD700'}\r\n                style={{\r\n                    default: {\r\n                        outline: 'none'\r\n                    },\r\n                    hover: {\r\n                        outline: 'none',\r\n                        fill: '#3C3B6E'\r\n                    },\r\n                    pressed: {\r\n                        outline: 'none',\r\n                        fill: stateName === currQuizState ? 'green' : 'red'\r\n                    }\r\n                }}\r\n                onClick={() => handleStateClick(geo)}\r\n            />\r\n            {showName &&\r\n                <g>\r\n                    {\r\n                        !STATE_NAME_OFFSETS[currState.id] ?\r\n                            (\r\n                                <Marker coordinates={centroid}>\r\n                                    <text y=\"3\" fontSize={STATE_NAME_SIZE} textAnchor=\"middle\">\r\n                                        {geo.properties.name}\r\n                                    </text>\r\n                                </Marker>\r\n                            ) :\r\n                            (\r\n                                <Annotation\r\n                                    subject={centroid}\r\n                                    dx={STATE_NAME_OFFSETS[currState.id].xArrow}\r\n                                    dy={STATE_NAME_OFFSETS[currState.id].yArrow}\r\n                                    connectorProps={STATE_NAME_OFFSETS[currState.id].optionsArrow}\r\n                                >\r\n                                    <text x={STATE_NAME_OFFSETS[currState.id].xText} fontSize={STATE_NAME_SIZE} alignmentBaseline=\"middle\">\r\n                                        {geo.properties.name}\r\n                                    </text>\r\n                                </Annotation>\r\n                            )}\r\n                </g>\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default UsState;\r\n\r\nfunction WashingtonDC({ geo }: { geo: any }) {\r\n    const centroid = geoCentroid(geo);\r\n    const offset = { xArrow: 40, yArrow: 50, xText: 1, optionsArrow: {} };\r\n\r\n    return (\r\n        <>\r\n            <Geography\r\n                className=\"Geography\"\r\n                stroke=\"#FFF\"\r\n                geography={geo}\r\n                fill='red'\r\n            />\r\n            <g>\r\n                <Annotation\r\n                    subject={centroid}\r\n                    dx={offset.xArrow}\r\n                    dy={offset.yArrow}\r\n                    connectorProps={offset.optionsArrow}\r\n                >\r\n                    <text x={offset.xText} fontSize={10} alignmentBaseline=\"middle\">\r\n                        {\"Washington D.C.\"}\r\n                    </text>\r\n                </Annotation>\r\n            </g>\r\n        </>\r\n    );\r\n}","import _ from 'lodash';\nimport allStatesJson from \"./data/allStates.json\";\n\nexport interface QuizState {\n    stateName: string, showName: boolean, hintUsed: boolean\n}\n\nexport function getNewShuffledQuiz(): QuizState[] {\n    return _.map(\n        _.shuffle(Object.keys(allStatesJson)), stateName => ({\n            stateName,\n            showName: false,\n            hintUsed: false\n        })\n    );\n}\n\nexport function getTimeCount(start: Date, end: Date): string {\n    const diffSeconds = (Math.floor((end.getTime() - start.getTime()) / 1000)) % 60;\n    const diffMinutes = Math.floor((end.getTime() - start.getTime()) / (1000 * 60));\n    const seconds = diffSeconds < 10 ? `0${diffSeconds}` : `${diffSeconds}`;\n    const minutes = diffMinutes < 10 ? `0${diffMinutes}` : `${diffMinutes}`;\n    return `${minutes}:${seconds}`;\n}","import React, { useState, useEffect } from 'react';\r\nimport _ from 'lodash';\r\nimport {\r\n    ComposableMap,\r\n    Geographies,\r\n} from 'react-simple-maps';\r\nimport UsState from './UsState';\r\nimport * as Utils from './Utils'\r\nimport './UsMap.css'\r\n\r\nconst GEO_URL = 'https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json';\r\nconst TOTAL_ERRORS_UNTIL_HINT = 3;\r\n\r\nfunction UsMap() {\r\n    const [quiz, setQuiz] = useState<Utils.QuizState[]>(Utils.getNewShuffledQuiz());\r\n    const [quizIndex, setQuizIndex] = useState(0);\r\n    const [totalErrors, setTotalErrors] = useState(0);\r\n    const [errorsToHint, setErrorsToHint] = useState(TOTAL_ERRORS_UNTIL_HINT);\r\n    const [quizEnded, setQuizEnded] = useState(false);\r\n\r\n    // timer:\r\n    const [startTime, setStartTime] = useState(new Date());\r\n    const [currTime, setCurrTime] = useState(new Date());\r\n\r\n    // update timer:\r\n    useEffect(() => {\r\n        let interval = setInterval(() => { }, 0);\r\n        if (!quizEnded) {\r\n            interval = setInterval(() => setCurrTime(new Date()), 1000);\r\n        } else {\r\n            clearInterval(interval);\r\n        }\r\n        return () => {\r\n            clearInterval(interval);\r\n        };\r\n    }, [quizEnded]);\r\n\r\n    // on restart:\r\n    const restartQuiz = () => {\r\n        setQuiz(Utils.getNewShuffledQuiz());\r\n        setQuizIndex(0);\r\n        setTotalErrors(0);\r\n        setErrorsToHint(TOTAL_ERRORS_UNTIL_HINT);\r\n        setQuizEnded(false);\r\n\r\n        // restart timer:\r\n        setStartTime(new Date());\r\n        setCurrTime(new Date());\r\n    }\r\n\r\n    const moveToNextState = (stateName: string, showName: boolean, hintUsed: boolean) => {\r\n        // update the quiz:\r\n        setQuiz([...quiz.slice(0, quizIndex), {\r\n            stateName,\r\n            showName,\r\n            hintUsed\r\n        },\r\n        ...quiz.slice(quizIndex + 1)\r\n        ]);\r\n\r\n        // move to the next state:\r\n        setQuizIndex(quizIndex + 1);\r\n\r\n        // check if the quiz has ended:\r\n        if (quizIndex + 1 === quiz.length) {\r\n            setQuizEnded(true);\r\n        }\r\n    }\r\n\r\n    const handleStateClick = (stateGeo: any) => {\r\n        // if quiz if over don't do a thing:\r\n        if (quizEnded) return;\r\n\r\n        const stateName = stateGeo?.properties?.name as string;\r\n        if (!stateName) return;\r\n\r\n        if (stateName === quiz[quizIndex].stateName) {\r\n            moveToNextState(stateName, true, false);\r\n\r\n            //reset errors to hint:\r\n            setErrorsToHint(TOTAL_ERRORS_UNTIL_HINT);\r\n        } else {\r\n            setTotalErrors(totalErrors + 1);\r\n            if (errorsToHint === 1) {\r\n                // user clicked 3 times on a wrong state, reveal the current state:\r\n                moveToNextState(quiz[quizIndex].stateName, true, true);\r\n\r\n                // fresh start of errors until next hint\r\n                setErrorsToHint(TOTAL_ERRORS_UNTIL_HINT);\r\n            } else {\r\n                setErrorsToHint(errorsToHint - 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    const statesPropertiesMap: { [key: string]: { showName: boolean, hintUsed: boolean } } = {};\r\n    _.forEach(quiz, state => {\r\n        statesPropertiesMap[state.stateName] = {\r\n            showName: state.showName,\r\n            hintUsed: state.hintUsed,\r\n        }\r\n    });\r\n\r\n    return (\r\n        <div className=\"UsMapQuiz\">\r\n            <div className=\"UsMapStats\">\r\n                <div className=\"UsMapStatsHeader\">\r\n                    <h1>US States Quiz</h1>\r\n                    <h3 style={{ fontWeight: 'normal' }}>How quickly can you identify the US states on the map?</h3>\r\n                </div>\r\n                <div className=\"UsMapStatsInfo\">\r\n                    {quizEnded &&\r\n                        <div className=\"UsMapStatsInfo\">\r\n                            <h1 className=\"QuizCurrentState\">WELL DONE!</h1>\r\n                            <p style={{ margin: '0px' }}>Mistakes made: {totalErrors}</p>\r\n                        </div>\r\n                    }\r\n                    {!quizEnded && <div>\r\n                        <h1 className=\"QuizCurrentState\">{quiz[quizIndex].stateName}</h1>\r\n                    </div>}\r\n                    <p style={{ margin: '10px' }}>{Utils.getTimeCount(startTime, currTime)}</p>\r\n                </div>\r\n                <div className=\"UsMapStatsInfo\">\r\n                    <p style={{ margin: '0px', fontSize: 'small' }}>Hint: If you guess the location incorrectly 3 times in a row, the correct state will automatically highlight itself.</p>\r\n                    <div className=\"RestartQuizButton Unselectable\" onClick={() => restartQuiz()}>\r\n                        Restart Quiz\r\n                    </div>\r\n                    <img src=\"usa-flag.svg\" alt=\"usa-flag\" className=\"UsaFlagImg Unselectable\" />\r\n                </div>\r\n            </div>\r\n\r\n            <ComposableMap className=\"UsMap\" projection=\"geoAlbersUsa\">\r\n                <Geographies geography={GEO_URL}>\r\n                    {({ geographies }) => (\r\n                        <>\r\n                            {geographies.map(geo => (\r\n                                <UsState\r\n                                    key={geo?.rsmKey}\r\n                                    geo={geo}\r\n                                    currQuizState={((quizIndex < quiz.length) && quiz[quizIndex].stateName) || ''}\r\n                                    showName={statesPropertiesMap[geo?.properties.name || '']?.showName}\r\n                                    hintUsed={statesPropertiesMap[geo?.properties.name || '']?.hintUsed}\r\n                                    handleStateClick={handleStateClick}\r\n                                />\r\n                            ))}\r\n                        </>\r\n                    )}\r\n                </Geographies>\r\n            </ComposableMap>\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default UsMap;\r\n","import React, { useState } from 'react';\r\nimport UsMap from './UsMap';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <UsMap />\r\n\r\n      <a\r\n        href=\"https://github.com/TomHerman11/us-states-quiz\"\r\n        rel=\"noreferrer\"\r\n        target=\"_blank\"\r\n        className=\"Unselectable\"\r\n      >\r\n        https://github.com/TomHerman11/us-states-quiz\r\n      </a>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}